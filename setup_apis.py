#!/usr/bin/env python3
"""
API Setup Script for Enhanced Financial Data Sources
Run this script to configure all your API keys for accurate company data.
"""

import os
import getpass
from pathlib import Path

def setup_api_keys():
    """Interactive setup for all financial data API keys."""

    print("üîë Setting up API keys for accurate financial data...")
    print("=" * 60)

    # Create .env file if it doesn't exist
    env_file = Path('.env')
    existing_keys = {}

    if env_file.exists():
        print("üìÑ Found existing .env file. Loading current keys...")
        with open(env_file, 'r') as f:
            for line in f:
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    existing_keys[key] = value

    # Alpha Vantage Setup
    print("\nüìä ALPHA VANTAGE (Most Accurate - Primary Data Source)")
    print("   ‚Ä¢ Get FREE API key: https://www.alphavantage.co/support/#api-key")
    print("   ‚Ä¢ 5 API calls/minute, 500 calls/day (free tier)")
    print("   ‚Ä¢ Professional-grade financial data")

    current_av_key = existing_keys.get('ALPHA_VANTAGE_API_KEY', '')
    if current_av_key:
        print(f"   Current key: {current_av_key[:8]}...")
        use_existing = input("   Use existing Alpha Vantage key? (y/n): ").lower().strip()
        if use_existing == 'n':
            current_av_key = ''

    if not current_av_key:
        av_key = getpass.getpass("   Enter Alpha Vantage API key: ").strip()
        if av_key:
            existing_keys['ALPHA_VANTAGE_API_KEY'] = av_key
            print("   ‚úÖ Alpha Vantage key saved")
        else:
            print("   ‚ö†Ô∏è Skipping Alpha Vantage setup")

    # Finnhub Setup
    print("\nüìà FINNHUB (Real-time Data - Secondary Source)")
    print("   ‚Ä¢ Get FREE API key: https://finnhub.io/docs/api")
    print("   ‚Ä¢ 60 API calls/minute (free tier)")
    print("   ‚Ä¢ Real-time quotes and company data")

    current_fh_key = existing_keys.get('FINNHUB_API_KEY', '')
    if current_fh_key:
        print(f"   Current key: {current_fh_key[:8]}...")
        use_existing = input("   Use existing Finnhub key? (y/n): ").lower().strip()
        if use_existing == 'n':
            current_fh_key = ''

    if not current_fh_key:
        fh_key = getpass.getpass("   Enter Finnhub API key: ").strip()
        if fh_key:
            existing_keys['FINNHUB_API_KEY'] = fh_key
            print("   ‚úÖ Finnhub key saved")
        else:
            print("   ‚ö†Ô∏è Skipping Finnhub setup")

    # SEC EDGAR Setup
    print("\nüìú SEC EDGAR (Official Filings - Fallback Source)")
    print("   ‚Ä¢ Get FREE API key: https://www.sec.gov/edgar/searchedgar/accessing-edgar-data.htm")
    print("   ‚Ä¢ Official SEC filings data")
    print("   ‚Ä¢ Most authoritative but slower")

    current_sec_key = existing_keys.get('SEC_API_KEY', '')
    if current_sec_key:
        print(f"   Current key: {current_sec_key[:8]}...")
        use_existing = input("   Use existing SEC key? (y/n): ").lower().strip()
        if use_existing == 'n':
            current_sec_key = ''

    if not current_sec_key:
        sec_key = getpass.getpass("   Enter SEC EDGAR API key: ").strip()
        if sec_key:
            existing_keys['SEC_API_KEY'] = sec_key
            print("   ‚úÖ SEC EDGAR key saved")
        else:
            print("   ‚ö†Ô∏è Skipping SEC EDGAR setup")

    # OpenAI Setup (if not already set)
    if 'OPENAI_API_KEY' not in existing_keys or not existing_keys['OPENAI_API_KEY']:
        print("\nü§ñ OPENAI (For AI-powered data validation)")
        print("   ‚Ä¢ Required for private company data estimation")
        print("   ‚Ä¢ Get key: https://platform.openai.com/api-keys")

        openai_key = getpass.getpass("   Enter OpenAI API key (optional): ").strip()
        if openai_key:
            existing_keys['OPENAI_API_KEY'] = openai_key
            print("   ‚úÖ OpenAI key saved")
        else:
            print("   ‚ö†Ô∏è Skipping OpenAI setup (private company analysis limited)")

    # Save all keys to .env file
    print("\nüíæ Saving API keys to .env file...")

    with open('.env', 'w') as f:
        f.write("# Financial Data API Keys\n")
        f.write("# Generated by setup_apis.py\n\n")

        for key, value in existing_keys.items():
            if value:  # Only save non-empty keys
                f.write(f"{key}={value}\n")

    print("‚úÖ API keys saved successfully!")

    # Summary
    print("\nüéØ DATA SOURCE SUMMARY:")
    print("=" * 40)

    sources = []
    if existing_keys.get('ALPHA_VANTAGE_API_KEY'):
        sources.append("‚úÖ Alpha Vantage (Primary - Most Accurate)")
    if existing_keys.get('FINNHUB_API_KEY'):
        sources.append("‚úÖ Finnhub (Secondary - Real-time)")
    if existing_keys.get('SEC_API_KEY'):
        sources.append("‚úÖ SEC EDGAR (Fallback - Official)")
    sources.append("‚úÖ Yahoo Finance (Always available)")

    for source in sources:
        print(f"   {source}")

    if not sources:
        print("   ‚ö†Ô∏è No API keys configured. Only Yahoo Finance will be available.")
    else:
        print(f"\nüéâ Ready to retrieve accurate data from {len(sources)} sources!")

    print("\nüí° TIPS:")
    print("   ‚Ä¢ Alpha Vantage is your most accurate data source")
    print("   ‚Ä¢ Use multiple sources for cross-validation")
    print("   ‚Ä¢ SEC EDGAR provides official filings data")
    print("   ‚Ä¢ Yahoo Finance works as a reliable fallback")

def test_api_keys():
    """Test all configured API keys."""
    print("\nüß™ Testing API keys...")

    from dotenv import load_dotenv
    load_dotenv()

    # Test Alpha Vantage
    if os.getenv('ALPHA_VANTAGE_API_KEY'):
        try:
            from alpha_vantage.timeseries import TimeSeries
            ts = TimeSeries(key=os.getenv('ALPHA_VANTAGE_API_KEY'))
            data, _ = ts.get_quote_endpoint(symbol='AAPL')
            print("   ‚úÖ Alpha Vantage: Working")
        except Exception as e:
            print(f"   ‚ùå Alpha Vantage: {e}")

    # Test Finnhub
    if os.getenv('FINNHUB_API_KEY'):
        try:
            import finnhub
            finnhub_client = finnhub.Client(api_key=os.getenv('FINNHUB_API_KEY'))
            profile = finnhub_client.company_profile2(symbol='AAPL')
            print("   ‚úÖ Finnhub: Working")
        except Exception as e:
            print(f"   ‚ùå Finnhub: {e}")

    # Test SEC EDGAR
    if os.getenv('SEC_API_KEY'):
        try:
            from sec_edgar_api import EdgarClient
            edgar = EdgarClient(os.getenv('SEC_API_KEY'))
            print("   ‚úÖ SEC EDGAR: Working")
        except Exception as e:
            print(f"   ‚ùå SEC EDGAR: {e}")

    print("   ‚úÖ Testing complete!")

if __name__ == "__main__":
    print("üöÄ Enhanced Financial Data Setup")
    print("This script will help you configure multiple data sources for accurate company data.")

    choice = input("\nChoose an option:\n1. Setup API keys\n2. Test existing keys\n3. Both\n\nEnter choice (1-3): ").strip()

    if choice in ['1', '3']:
        setup_api_keys()

    if choice in ['2', '3']:
        test_api_keys()

    print("\nüéØ Next steps:")
    print("1. Install required packages: pip install -r requirements-enhanced.txt")
    print("2. Use get_multi_source_financials() instead of get_comprehensive_financials()")
    print("3. Your data quality will improve significantly!")
